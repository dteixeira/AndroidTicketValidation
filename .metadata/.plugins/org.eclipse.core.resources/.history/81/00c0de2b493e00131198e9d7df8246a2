package org.cmov.ticketclient;

import java.lang.reflect.Field;
import java.util.Calendar;

import org.json.JSONObject;

import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class RegisterActivity extends Activity implements HttpRequestResultCallback {
	
	private int mYear = 0;
	private int mMonth = 0;
	private int mDay = 0;
	
	DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {

		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
			mYear = year;
			mMonth = monthOfYear;
			mDay = dayOfMonth;
			updateDate();
		}
	};
	
	View.OnClickListener mFormSubmit = new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
			validateForm();
		}
	};
	
	View.OnClickListener mDateFieldListener = new View.OnClickListener() {

		@Override
		public void onClick(View view) {
			createCustomDatePicker().show();
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_register);

		// Get current date.
		Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH) + 1;
		
		// Credit card date click listener.
		findViewById(R.id.card_date).setOnClickListener(mDateFieldListener);
		
		// Form submit listener.
		findViewById(R.id.sign_in_button).setOnClickListener(mFormSubmit);
		
		// Check WIFI state.
		checkWifiState();
	}
	
	@Override
	public void onBackPressed() {
		AlertDialog alertDialog = new AlertDialog.Builder(this).create();
		alertDialog.setTitle("Exit");
		alertDialog.setMessage("This app cannot be used without an account. Do you want to quit?");
		
		// Back button.
		alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "No", new AlertDialog.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {}
		});

		// Ok button.
		alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new AlertDialog.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				Intent intent = new Intent();
		        intent.putExtra(MainActivity.EXTRA_REGISTERED, false);
		        intent.putExtra(MainActivity.EXTRA_USER_ID, -1);
		        setResult(Activity.RESULT_CANCELED, intent);
		        finish();
			}
		});
		alertDialog.show();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		// getMenuInflater().inflate(R.menu.register, menu);
		return true;
	}
	
	@Override
	public void onRequestResult(boolean result, JSONObject data, int requestCode) {
		// TODO Auto-generated method stub
		
	}
	
	private void checkWifiState() {
		// Enable WIFI.
		WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
		if(wifi != null && !wifi.isWifiEnabled()) {
			AlertDialog alertDialog = new AlertDialog.Builder(this).create();
			alertDialog.setTitle("Exit");
			alertDialog.setMessage("You need an internet connection to create an account. " +
					"Please enable a data connection and try again.");

			// Ok button.
			alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Ok", new AlertDialog.OnClickListener() {
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					Intent intent = new Intent();
			        intent.putExtra(MainActivity.EXTRA_REGISTERED, false);
			        intent.putExtra(MainActivity.EXTRA_USER_ID, -1);
			        setResult(Activity.RESULT_CANCELED, intent);
			        finish();
				}
			});
			alertDialog.show();
		}
	}
	
	private void updateDate() {
		int localMonth = (mMonth + 1);
        String monthString = localMonth < 10 ? "0" + localMonth : Integer.toString(localMonth);
        String localYear = Integer.toString(mYear).substring(2);
        ((EditText) findViewById(R.id.card_date)).setText(new StringBuilder().append(monthString).append("/").append(localYear).append(" "));
	}
	
	private void validateForm() {
		EditText name = (EditText) findViewById(R.id.name);
		EditText login = (EditText) findViewById(R.id.login);
		EditText password = (EditText) findViewById(R.id.password);
		EditText repeatPassword = (EditText) findViewById(R.id.password_repeat);
		EditText ccNumber = (EditText) findViewById(R.id.card_number);
		EditText ccDate = (EditText) findViewById(R.id.card_date);
		Spinner ccType = (Spinner) findViewById(R.id.card_type);
		String sCcType = ccType.getSelectedItem().toString();
		long ccDateEpoch = 0;
		
		// Name validation.
		String sName = name.getText().toString().trim();
		if(sName.length() < 5) {
			showErrorToast("Your name is too short.");
			return;
		}
		
		// Login validation.
		String sLogin = login.getText().toString().trim();
		if(sLogin.length() < 5) {
			showErrorToast("Your login is too short.");
			return;
		} else if(sLogin.contains(" ")) {
			showErrorToast("Your login cannot contain spaces.");
			return;
		}
		
		// Password validation.
		String sPassword = password.getText().toString().trim();
		String sRepeatPassword = repeatPassword.getText().toString().trim();
		if(sPassword.length() < 5) {
			showErrorToast("Your password is too short.");
			return;
		} else if(sPassword.contains(" ")) {
			showErrorToast("Your password cannot contain spaces.");
			return;
		} else if(!sPassword.equals(sRepeatPassword)) {
			showErrorToast("Your passwords do not math.");
			return;
		}
		
		// Credit card number validation.
		String sCcNumber = ccNumber.getText().toString().trim();
		if(sCcNumber.length() != 8) {
			showErrorToast("Your credit card number must be 8 digits long.");
			return;
		}
		
		// Credit card date validation.
		String sCcDate = ccDate.getText().toString().trim();
		Calendar c = Calendar.getInstance();
		if(sCcDate.isEmpty()) {
			showErrorToast("Your credit card expiration date must be set.");
			return;
		} else if(mYear < c.get(Calendar.YEAR)) {
			showErrorToast("Your credit card is already expired.");
			return;
		} else if(mYear == c.get(Calendar.YEAR) && mMonth < c.get(Calendar.MONTH)) {
			showErrorToast("Your credit card is already expired.");
			return;
		}
		
		// Convert expiration date to Unix time.
		c.set(mYear, mMonth, mDay);
		ccDateEpoch = c.getTimeInMillis();
		
		// Try to register the user.
		registerUser(sName, sLogin, sPassword, sCcNumber, ccDateEpoch, sCcType);
	}
	
	private void registerUser(String name, String login, String password, 
			String ccNumber, long ccDate, String ccType) {
		// TODO Make request.
	}
	
	private void showErrorToast(String message) {
		Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
	}
	
	private DatePickerDialog createCustomDatePicker() {
		DatePickerDialog dpd = new DatePickerDialog(this, mDateSetListener, mYear, mMonth, mDay);
		try {
			Field[] datePickerDialogFields = dpd.getClass().getDeclaredFields();
			for (Field datePickerDialogField : datePickerDialogFields) {
				if (datePickerDialogField.getName().equals("mDatePicker")) {
					datePickerDialogField.setAccessible(true);
					DatePicker datePicker = (DatePicker) datePickerDialogField.get(dpd);
					Field datePickerFields[] = datePickerDialogField.getType().getDeclaredFields();
					for (Field datePickerField : datePickerFields) {
						if ("mDayPicker".equals(datePickerField.getName()) || "mDaySpinner".equals(datePickerField.getName())) {
							datePickerField.setAccessible(true);
							Object dayPicker = new Object();
							dayPicker = datePickerField.get(datePicker);
							((View) dayPicker).setVisibility(View.GONE);
						}
					}
				}

			}
		} catch (Exception ex) {}
		return dpd;
	}

}
