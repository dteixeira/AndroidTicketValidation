package org.cmov.ticketclient;

import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.GregorianCalendar;

import android.os.Bundle;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class RegisterActivity extends Activity {
	
	private int mYear = 0;
	private int mMonth = 0;
	private int mDay = 0;
	
	DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {

		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
			mYear = year;
			mMonth = monthOfYear;
			mDay = dayOfMonth;
			
			int localMonth = (mMonth + 1);
            String monthString = localMonth < 10 ? "0" + localMonth : Integer.toString(localMonth);
            String localYear = Integer.toString(mYear).substring(2);
            ((EditText) findViewById(R.id.card_date)).setText(new StringBuilder().append(monthString).append("/").append(localYear).append(" "));
		}
	};
	
	View.OnClickListener mFormSubmit = new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
			EditText name = (EditText) findViewById(R.id.name);
			EditText email = (EditText) findViewById(R.id.name);
			EditText password = (EditText) findViewById(R.id.name);
			EditText repeatPassword = (EditText) findViewById(R.id.name);
			EditText ccNumber = (EditText) findViewById(R.id.name);
			Spinner ccType = (Spinner) findViewById(R.id.card_type);
			
		}
		
		public void showErrorToast(String message) {
			Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
		}
	};
	
	View.OnClickListener mDateFieldListener = new View.OnClickListener() {

		@Override
		public void onClick(View view) {
			createCustomDatePicker().show();
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_register);

		// Get current date.
		Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH) + 1;
		
		// Credit card date click listener.
		findViewById(R.id.card_date).setOnClickListener(mDateFieldListener);
		
		// Form submit listener.
		findViewById(R.id.sign_in_button).setOnClickListener(mFormSubmit);
	}
	
	@Override
	public void onBackPressed() {
		AlertDialog alertDialog = new AlertDialog.Builder(this).create();
		alertDialog.setTitle("Exit");
		alertDialog.setMessage("This app cannot be used without an account. Do you want to quit?");
		
		// Back button.
		alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Back", new AlertDialog.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {}
		});

		// Ok button.
		alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Ok", new AlertDialog.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				Intent intent = new Intent();
		        intent.putExtra(MainActivity.EXTRA_REGISTERED, false);
		        intent.putExtra(MainActivity.EXTRA_USER_ID, -1);
		        setResult(Activity.RESULT_CANCELED, intent);
		        finish();
			}
		});
		alertDialog.show();
	}
	
	private DatePickerDialog createCustomDatePicker() {
		DatePickerDialog dpd = new DatePickerDialog(this, mDateSetListener, mYear, mMonth, mDay);
		try {
			Field[] datePickerDialogFields = dpd.getClass().getDeclaredFields();
			for (Field datePickerDialogField : datePickerDialogFields) {
				if (datePickerDialogField.getName().equals("mDatePicker")) {
					datePickerDialogField.setAccessible(true);
					DatePicker datePicker = (DatePicker) datePickerDialogField.get(dpd);
					Field datePickerFields[] = datePickerDialogField.getType().getDeclaredFields();
					for (Field datePickerField : datePickerFields) {
						if ("mDayPicker".equals(datePickerField.getName()) || "mDaySpinner".equals(datePickerField.getName())) {
							datePickerField.setAccessible(true);
							Object dayPicker = new Object();
							dayPicker = datePickerField.get(datePicker);
							((View) dayPicker).setVisibility(View.GONE);
						}
					}
				}

			}
		} catch (Exception ex) {}
		return dpd;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		// getMenuInflater().inflate(R.menu.register, menu);
		return true;
	}

}
