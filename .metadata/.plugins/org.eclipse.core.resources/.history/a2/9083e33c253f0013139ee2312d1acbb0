package org.cmov.ticketclient;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import org.cmov.ticketclient.HttpRequestAsyncTask.HttpRequestType;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.ListFragment;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ListView;
import android.widget.Toast;

public class MainActivity extends FragmentActivity implements HttpRequestResultCallback {

	private static final String TAG = MainActivity.class.getSimpleName();
	public static final String SERVER_URL = "http://192.168.1.64:4567";
	public static final String TICKETS_URL = "/tickets/";
	public static final String REGISTER_PREFS = "RegisterDone";
	public static final String REGISTERED = "Registered";
	public static final String USER_ID = "UserId";
	public static final String USER_LOGIN = "UserLogin";
	public static final String EXTRA_REGISTERED = "ExtraRegistered";
	public static final String EXTRA_USER_ID = "ExtraUserId";
	public static final String EXTRA_USER_LOGIN = "ExtraUserLogin";
	public static final String REQUEST_SUCCESS = "success";
	public static final int REQUEST_REGISTER = 10001;
	public static final int REQUEST_TICKETS = 10002;
	public static final String TICKETS_PARAMETER = "tickets";
	
	/** Private backup files **/
	
	private static final String USED_TICKETS_FILE = "used_file";
	private static final String UNUSED_TICKETS_FILE = "unused_file";
	
	private boolean registered = false;
	private int userId = -1;
	private String userLogin = null;
	
	SectionsPagerAdapter mSectionsPagerAdapter;
	UnusedTicketAdapter mUnusedTicketsAdapter;
	ViewPager mViewPager;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager(), this);

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);
		
		// Set unused tickets adapter.
		mUnusedTicketsAdapter = new UnusedTicketAdapter(MainActivity.this, new ArrayList<Ticket>());
		ListFragment unusedTickets = (ListFragment) mSectionsPagerAdapter.getmUnusedTicketsFragment();
		unusedTickets.setListAdapter(mUnusedTicketsAdapter);
		
		// Restore preferences
		SharedPreferences settings = getSharedPreferences(REGISTER_PREFS, 0);
		registered = settings.getBoolean(REGISTERED, false);
		userId = settings.getInt(USER_ID, -1);
		userLogin = settings.getString(USER_LOGIN, null);
		manageRegister();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.action_refresh:
			
			break;
			
		case R.id.action_delete_cache:
			// TODO
			break;

		default:
			break;
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// Register user request.
		if(requestCode == REQUEST_REGISTER) {
			// Register canceled, quit.
			if(resultCode == Activity.RESULT_CANCELED) {
				finish();
			} else {
				SharedPreferences settings = getSharedPreferences(REGISTER_PREFS, 0);
				SharedPreferences.Editor editor = settings.edit();
				registered = data.getBooleanExtra(EXTRA_REGISTERED, false);
				userId = data.getIntExtra(EXTRA_USER_ID, -1);
				userLogin = data.getStringExtra(EXTRA_USER_LOGIN);
				editor.putBoolean(REGISTERED, registered);
				editor.putInt(USER_ID, userId);
				editor.putString(USER_LOGIN, userLogin);
				editor.commit();
				getTicketsServer();
			}
		}
	}
	
	private void manageRegister() {
		if(!registered) {
			Intent intent = new Intent(getApplicationContext(), RegisterActivity.class);
			startActivityForResult(intent, REQUEST_REGISTER);
		} else {
			getTicketsLocal();
		}
	}
	
	private void getTicketsLocal() {
		getUnusedTicketsLocal();
		getUsedTicketsLocal();
	}
	
	private void getUsedTicketsLocal() {
		try {
			FileInputStream used = openFileInput(USED_TICKETS_FILE);
			ObjectInputStream oUsed = new ObjectInputStream(used);
			ArrayList<Ticket> usedTickets = (ArrayList<Ticket>) oUsed.readObject();
			// TODO
		} catch (FileNotFoundException e) {
			Log.e(TAG, "No history to load.", e);
		} catch (Exception e) {
			Log.e(TAG, "ObjectInputStream failed.", e);
		}
	}
	
	private void getUnusedTicketsLocal() {
		try {
			FileInputStream unused = openFileInput(UNUSED_TICKETS_FILE);
			ObjectInputStream oUnused = new ObjectInputStream(unused);
			ArrayList<Ticket> unusedTickets = (ArrayList<Ticket>) oUnused.readObject();
			// TODO
		} catch (FileNotFoundException e) {
			Log.e(TAG, "No tickets to load.", e);
		} catch (Exception e) {
			Log.e(TAG, "ObjectInputStream failed.", e);
		}
		
	}
	
	private void getTicketsServer() {
		HttpRequestAsyncTask task = new HttpRequestAsyncTask(this, 
				HttpRequestType.Get,
				null,
				SERVER_URL + TICKETS_URL + userLogin,
				"Fetching tickets from server.",
				REQUEST_TICKETS);
		task.execute((Void[]) null);
	}

	@Override
	public void onRequestResult(boolean result, JSONObject data, int requestCode) {
		switch(requestCode) {

		case REQUEST_TICKETS:
			try {
				JSONArray array = data.getJSONArray(TICKETS_PARAMETER);
				ArrayList<Ticket> tickets = new ArrayList<Ticket>();
				for(int i = 0; i < array.length(); ++i) {
					tickets.add(new Ticket(array.getJSONObject(i)));
				}
				mUnusedTicketsAdapter.setTickets(tickets);
				mUnusedTicketsAdapter.notifyDataSetChanged();
			} catch (JSONException e) {
				Log.e(TAG, "Failed to get tickets. " + data.toString() +
						" " + SERVER_URL + TICKETS_URL + userLogin, e);
				Toast.makeText(getApplicationContext(), 
						"Failed to retrieve tickets.", 
						Toast.LENGTH_SHORT).show();
			}
			break;

		default:
			break;
		}
	}

}
