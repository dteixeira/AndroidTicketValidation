package org.cmov.ticketinspector;

import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

public class HttpRequestAsyncTask extends AsyncTask<Void, Void, Void> {
	
	public static enum HttpRequestType {
		Get, Post
	}
	
	/**
	 * Constants.
	 */
	private static final String TAG = HttpRequestAsyncTask.class.getSimpleName();
	
	/**
	 * Instance variables.
	 */
	private ProgressDialog progressDialog = null;
	private Activity callingActivity = null;
	private HttpRequestType requestType = HttpRequestType.Get;
	private JSONObject requestData = null;
	private String requestUrl = null;
	private String progressMessage = null;
	private JSONObject requestResult = null;
	
	/**
	 * Creates a new async task instance.
	 */
	public HttpRequestAsyncTask(HttpRequestResultCallback activity, 
			HttpRequestType requestType,
			JSONObject requestData,
			String requestUrl,
			String progressMessage) {
		this.callingActivity = (Activity) activity;
		this.requestType = requestType;
		this.requestData = requestData;
		this.requestUrl = requestUrl;
		this.progressMessage = progressMessage;
		this.progressDialog = new ProgressDialog(this.callingActivity);
	}
	
	/**
	 * Sets up a progress dialog.
	 */
	@Override
	protected void onPreExecute() {
		
		// Show a progress modal dialog.
		progressDialog.setMessage(this.progressMessage);
		progressDialog.setCancelable(false);
		progressDialog.setCanceledOnTouchOutside(false);
		progressDialog.show();
	}

	/**
	 * Accesses the REST remote API.
	 */
	@Override
	protected Void doInBackground(Void... params) {
	}
	
	/**
	 * Closes the progress dialog and informs the activity that
	 * the task ended.
	 */
	@Override
	protected void onPostExecute(Void result) {
		
		// Dismiss the progress dialog.
		if (progressDialog.isShowing()) {
			progressDialog.dismiss();
        }
		
		// Show a toast according to the result.
		if(isConnected.get() && socket != null) {
			Toast.makeText(callingActivity, "Connection established.", Toast.LENGTH_SHORT).show();
		} else {
			Toast.makeText(callingActivity, "Connection failed.", Toast.LENGTH_SHORT).show();
		}
		
		// Callback the task executor.
		Log.d(TAG, "Invoking result callback.");
		((HttpRequestResultCallback) callingActivity).onRequestResult(isConnected.get(), socket);
	}

}
