package org.cmov.validationterminal;

import org.cmov.validationterminal.bluetooth.BluetoothHelper;
import org.cmov.validationterminal.bluetooth.BluetoothServerService;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.jwetherell.quick_response_code.data.Contents;
import com.jwetherell.quick_response_code.qrcode.QRCodeEncoder;
import android.os.Bundle;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity {
	
	/**
	 * Constant definitions.
	 */
	
	private static final int REQUEST_ENABLE_BLUETOOTH = 100001;

	/**
	 * Instance variables.
	 */
	
	private boolean isServiceRunning = false;
	
	/**
	 * Anonymous classes.
	 */
	
	View.OnClickListener mStartServerClickListener = new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
			
			// Starts the server if it isn't running, or
			// stops it otherwise.
			if(isServiceRunning) {
				stopServerService();
			} else {
				startServerService();
			}
		}
	};
	
	BroadcastReceiver mConnectionBroadcastReceiver = new BroadcastReceiver() {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			String mac = (String) intent.getExtras().get(BluetoothServerService.EXTRA_MAC_ADDR);
			BluetoothSocket socket = BluetoothServerService.getSocket(mac);
			BluetoothHelper.bluetoothWriteObject(new String("Hello, world!"), socket);
			Toast.makeText(getApplicationContext(), "New user connected: " + mac, Toast.LENGTH_SHORT).show();
		}
	};

	/**
	 * Overridden activity methods.
	 */

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		// Indicate the correct button text.
		if(isServiceRunning) {
			
			// Register for broadcast and restart the service.
			registerReceiver(mConnectionBroadcastReceiver, new IntentFilter(BluetoothServerService.ACTION_BLUETOOTH_SERVICE));
	    	startService(new Intent(this, BluetoothServerService.class));
	    	((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.stop_button_text));
		} else {
			((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.start_button_text));
		}
		
		// Add the server button behavior.
		findViewById(R.id.server_toggle_button).setOnClickListener(mStartServerClickListener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		
		// Inflate the menu; this adds items to the action bar if it is present.
		// getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	@Override
    protected void onDestroy() {
		if(isServiceRunning) {
	    	unregisterReceiver(mConnectionBroadcastReceiver);
	    	stopService(new Intent(this, BluetoothServerService.class));
		}
		super.onDestroy();
    }
	
	@Override
	protected void onPause() {
		
		// Stop the service if it is running.
		if(isServiceRunning) {
			unregisterReceiver(mConnectionBroadcastReceiver);
	    	stopService(new Intent(this, BluetoothServerService.class));
		}
		super.onPause();
	}
	
	@Override
	protected void onResume() {
		
		// Indicate the correct button text.
		if(isServiceRunning) {
			
			// Register for broadcast and restart the service.
			registerReceiver(mConnectionBroadcastReceiver, new IntentFilter(BluetoothServerService.ACTION_BLUETOOTH_SERVICE));
	    	startService(new Intent(this, BluetoothServerService.class));
	    	((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.stop_button_text));
		} else {
			((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.start_button_text));
			destroyQRImage();
		}
		super.onRestart();
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if(requestCode == REQUEST_ENABLE_BLUETOOTH) {
			if(resultCode == RESULT_CANCELED) {
				Toast.makeText(getApplicationContext(), getResources().getString(R.string.no_bluetooth_text), Toast.LENGTH_SHORT).show();
			} else {
				startServerService();
			}
		}
	}
	
	/**
	 * Server management methods.
	 */

	private void startServerService() {
		if(!BluetoothHelper.isBluetoothAvailable()) {
			BluetoothHelper.bluetoothEnable(this, true, REQUEST_ENABLE_BLUETOOTH);
		} else {
			Intent intent = new Intent(this, BluetoothServerService.class);
			startService(intent);
			isServiceRunning = true;
	    	registerReceiver(mConnectionBroadcastReceiver, new IntentFilter(BluetoothServerService.ACTION_BLUETOOTH_SERVICE));
	    	((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.stop_button_text));
	    	Toast.makeText(getApplicationContext(), getResources().getString(R.string.server_started_text), Toast.LENGTH_SHORT).show();
	    	createQRImage();
		}
	}
	
	private void createQRImage() {
		ImageView imageView = (ImageView) findViewById(R.id.qr_image_view);
    	QRCodeEncoder qrCodeEncoder = new QRCodeEncoder(
    			BluetoothAdapter.getDefaultAdapter().getAddress(), 
    			null, 
    			Contents.Type.TEXT, 
    			BarcodeFormat.QR_CODE.toString(), 
    			imageView.getWidth());
    	Bitmap bitmap = null;
		try {
			bitmap = qrCodeEncoder.encodeAsBitmap();
		} catch (WriterException e) {}
        imageView.setImageBitmap(bitmap);
        findViewById(R.id.qr_layout).setBackgroundResource(R.color.white_color);
	}
	
	private void destroyQRImage() {
		ImageView imageView = (ImageView) findViewById(R.id.qr_image_view);
		imageView.setImageBitmap(null);
		findViewById(R.id.qr_layout).setBackgroundResource(R.color.darkslategray_color);
	}

	private void stopServerService() {
		unregisterReceiver(mConnectionBroadcastReceiver);
    	stopService(new Intent(this, BluetoothServerService.class));
    	isServiceRunning = false;
    	((Button) findViewById(R.id.server_toggle_button)).setText(getResources().getString(R.string.start_button_text));
    	Toast.makeText(getApplicationContext(), getResources().getString(R.string.server_stopped_text), Toast.LENGTH_SHORT).show();
    	destroyQRImage();
	}

}
